var N=null,E="",T="t",U="u",searchIndex={};
var R=["tower_service","Service","tower_discover","change","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","ServiceList","ServiceStream","Discover","tower_layer","tower_test","Mock `Service` that can be used in tests.","tower_test::mock","send_error","tower_test::mock::error","tower_test::mock::future","formatter","SendResponse","ResponseFuture","poll_ready","tower_load_shed","to_owned","clone_into","tower_load_shed::error","tower_load_shed::future","LoadShedLayer","LoadShed","Overloaded","Error types","Future types","to_string","into_future","tower_buffer","with_executor","Creates a new `Buffer` wrapping `service`.","tower_buffer::error","tower_buffer::future","BufferLayer","ServiceError","SpawnError","string","tower_util","callallunordered","into_inner","Extract the wrapped `Service`.","optional","tower_util::layer","tower_util::error::optional","tower_util::future::optional","identity","servicefn","option","future","request","BoxService","UnsyncBoxService","CallAllUnordered","Identity","Optional","MakeService","ServiceFn","Response","tower_filter","tower_filter::error","tower_filter::future","FilterLayer","Predicate","tower_timeout","duration","tower_timeout::error","tower_timeout::future","TimeoutLayer","tower_retry","overdrawn","tower_retry::budget","tower_retry::future","RetryLayer","Overdrawn","tower_limit","Enforces a limit on the concurrent number of requests the…","Enforces a rate limit on the number of requests the…","ConcurrencyLimitLayer","ConcurrencyLimit","RateLimitLayer","RateLimit","tower_limit::rate","Get a reference to the inner service","Get a mutable reference to the inner service","Consume `self`, returning the inner service","tower_limit::concurrency::future","tower_limit::rate::future","tower_load","tower_load::peak_ewma","tower_load::pending_requests","instrument","ordering","partial_cmp","Yields the next discovery change set.","InstrumentFuture","PeakEwmaDiscover","PendingRequestsDiscover","Instrument","NoInstrument","PendingRequests","tower_reconnect","tower_reconnect::future","Reconnect","make_service","tower_spawn_ready","Creates a new `SpawnReady` wrapping `service`.","tower_spawn_ready::error","tower_spawn_ready::future","SpawnReadyLayer","SpawnReady","MakeFuture","MakeSpawnReady","BackgroundReady","make_connection","Error produced when spawning the worker fails","This trait allows you to use either Tokio's threaded…","tower_balance","from_entropy","Initializes a P2C load balancer from the OS's entropy…","tower_balance::error","tower_balance::p2c","tower_balance::pool","BalanceLayer","BalanceMake","PoolDiscoverer","tower::buffer","tower::limit::concurrency","tower::limit","tower::limit::rate","tower::load_shed","tower::retry","tower::timeout","servicebuilder","tower::buffer::error","tower::buffer::future","tower::discover","tower::limit::concurrency::future","tower::limit::rate::future","tower::load_shed::error","tower::load_shed::future","tower::retry::budget","tower::retry::future","tower::timeout::error","tower::timeout::future","tower::builder","tower::layer::util","tower::util","concurrencylimitlayer","bufferlayer","defaultexecutor","concurrencylimit","ratelimitlayer","loadshedlayer","retrylayer","timeoutlayer","MakeConnection","ServiceBuilder","ServiceExt","An asynchronous function from `Request` to a `Response`.","Responses given by the service.","Errors produced by the service.","The future response value.","Returns `Ready` when the service is able to process…","Process the request and return the response asynchronously.","Decorates a `Service`, transforming either the request or…","The wrapped service","Wrap the given service with the middleware, returning a…","A `tower-layer` to wrap services in `LoadShed` middleware.","A `Service` that sheds load when the inner service isn't…","An error returned by `Overload` when the underlying…","Future for the `LoadShed` service.","Creates a new layer.","Wraps a service in `LoadShed` middleware.","Static service discovery based on a predetermined list of…","Dynamic service discovery based on a stream of service…","A change in the service set","servicelist","Provide a uniform set of services able to satisfy a request.","NewService key","Error produced during discovery","Buffer requests with a bounded buffer","Adds a buffer in front of an inner service.","An error produced by a `Service` wrapped by a `Buffer`","An error when the buffer's worker closes unexpectedly.","Future eventually completed with the response to the…","WorkerExecutor","A boxed `Service + Send` trait object.","A boxed `Service` trait object.","This is a `futures::Stream` of responses resulting from…","A stream of responses received from the inner service in…","A `Future` consuming a `Service` and request, waiting…","Optionally forwards requests to an inner service.","Future yielding a `Service` once the service is ready to…","Combine two different service types into a single type.","service_fn","Returns a new `ServiceFn` with the given closure.","Create new `CallAll` combinator.","unordered","Return responses as they are ready, regardless of the…","Create new `CallAllUnordered` combinator.","A no-op middleware.","Two middlewares chained together.","Create a new `Identity` value","Create a new `Stack`.","Create a new `OptionService`","Creates new `Service` values.","Responses given by the service","Errors produced by the service","The `Service` value created by this factory","MakeError","Errors produced while building a service.","The future of the `Service` instance.","Returns `Ready` when the factory is able to process create…","Create and return a new service value asynchronously.","Applies a timeout to requests via the supplied inner…","Applies a timeout to requests.","The timeout elapsed.","`Timeout` response future","Create a timeout from a duration","Creates a new Timeout","Retry requests based on a policy","Configure retrying requests of \"failed\" responses.","A retry \"budget\" for allowing only a certain amount of…","Represents a \"budget\" for retrying requests.","Indicates that it is not currently allowed to \"withdraw\"…","Create a `Budget` that allows for a certain percent of the…","Store a \"deposit\" in the budget, which will be used to…","Check whether there is enough \"balance\" in the budget to…","The `Future` returned by a `Retry` service.","Create a new `RetryLayer` from a retry policy","A \"retry policy\" to classify if a request should be retried.","The `Future` type returned by `Policy::retry()`.","Check the policy if a certain request should be retried.","clone_request","Tries to clone a request before being passed to the inner…","concurrency","Limit the max number of requests being concurrently…","Future for the `ConcurrencyLimit` service.","Create a new concurrency limit layer.","Create a new concurrency limiter.","Limit the rate at which requests are processed.","A rate of requests per time period.","Future for the `RateLimit` service.","Create new rate limit layer.","Create a new rate.","Create a new rate limiter","default","tower_hedge"];
searchIndex["tower"]={"doc":"`fn(Request) -> Future<Response>`","i":[[0,"error",R[134],R[33],N,N],[3,R[43],R[142],R[191],N,N],[3,"Closed",E,R[192],N,N],[3,R[44],E,R[123],N,N],[0,R[57],R[134],R[34],N,N],[3,R[23],R[143],R[193],N,N],[8,R[194],R[134],R[124],N,N],[3,"Buffer",E,R[190],N,N],[3,R[42],E,R[189],N,N],[8,R[13],R[144],R[186],N,N],[16,"Key",E,R[187],0,N],[16,R[1],E,E,0,N],[16,"Error",E,R[188],0,N],[10,"poll",E,R[102],0,[[["self"]],[["async",[R[3]]],[R[4],["async"]]]]],[4,"Change",E,R[184],N,N],[13,"Insert",E,E,1,N],[13,"Remove",E,E,1,N],[3,R[12],E,R[183],N,N],[3,R[11],E,R[182],N,N],[0,R[244],R[136],R[245],N,N],[0,R[57],R[135],R[34],N,N],[3,R[23],R[145],R[246],N,N],[3,R[86],R[135],R[84],N,N],[3,R[87],E,R[84],N,N],[0,"rate",R[136],R[249],N,N],[0,R[57],R[137],R[34],N,N],[3,R[23],R[146],R[251],N,N],[3,R[88],R[137],R[85],N,N],[3,"Rate",E,R[250],N,N],[3,R[89],E,R[85],N,N],[0,"error",R[138],R[33],N,N],[3,R[32],R[147],R[178],N,N],[0,R[57],R[138],R[34],N,N],[3,R[23],R[148],R[179],N,N],[3,R[31],R[138],R[177],N,N],[3,R[30],E,R[176],N,N],[0,"budget",R[139],R[231],N,N],[3,"Budget",R[149],R[232],N,N],[3,R[82],E,R[233],N,N],[0,R[57],R[139],R[34],N,N],[3,R[23],R[150],R[237],N,N],[3,"Retry",R[139],R[230],N,N],[8,"Policy",E,R[239],N,N],[16,"Future",E,R[240],2,N],[10,"retry",E,R[241],2,[[["e"],["req"],["res"],["self"],[R[4]]],[R[56]]]],[10,R[242],E,R[243],2,[[["req"],["self"]],[R[56]]]],[3,R[81],E,R[229],N,N],[0,"error",R[140],R[33],N,N],[3,"Elapsed",R[151],R[225],N,N],[0,R[57],R[140],R[34],N,N],[3,R[23],R[152],R[226],N,N],[3,"Timeout",R[140],R[224],N,N],[3,R[76],E,R[223],N,N],[8,R[1],"tower",R[167],N,N],[16,R[66],E,R[168],3,N],[16,"Error",E,R[169],3,N],[16,"Future",E,R[170],3,N],[10,R[24],E,R[171],3,[[["self"]],[[R[4],["async"]],["async"]]]],[10,"call",E,R[172],3,[[[R[58]],["self"]]]],[5,R[203],E,R[204],N,[[[T]],[R[55]]]],[8,R[164],E,"The MakeConnection trait is used to create transports",N,N],[16,"Connection",E,"The transport provided by this service",4,N],[16,"Error",E,"Errors produced by the connecting service",4,N],[16,"Future",E,"The future that eventually produces the transport",4,N],[10,R[24],E,"Returns `Ready` when it is able to make more connections.",4,[[["self"]],[["async"],[R[4],["async"]]]]],[10,R[122],E,"Connect and return a transport asynchronously",4,[[["target"],["self"]]]],[8,R[64],E,R[214],N,N],[16,R[66],E,R[215],5,N],[16,"Error",E,R[216],5,N],[16,R[1],E,R[217],5,N],[16,R[218],E,R[219],5,N],[16,"Future",E,R[220],5,N],[10,R[24],E,R[221],5,[[["self"]],[[R[4],["async"]],["async"]]]],[10,R[112],E,R[222],5,[[["target"],["self"]]]],[0,"builder",E,"Builder types to compose layers and services",N,N],[3,R[165],R[153],"Declaratively construct Service values.",N,N],[11,"new",E,"Create a new `ServiceBuilder`.",6,[[],["self"]]],[11,"layer",E,"Add a new layer `T` into the `ServiceBuilder`.",6,[[[T]],[["stack"],[R[141],["stack"]]]]],[11,"buffer",E,"Buffer requests when when the next layer is out of capacity.",6,[[["usize"]],[[R[141],["stack"]],["stack",[R[157]]]]]],[11,"concurrency_limit",E,"Limit the max number of in-flight requests.",6,[[["usize"]],[[R[141],["stack"]],["stack",[R[156]]]]]],[11,"load_shed",E,"Drop requests when the next layer is unable to respond to…",6,[[],[["stack",[R[161]]],[R[141],["stack"]]]]],[11,"rate_limit",E,"Limit requests to at most `num` per the given duration",6,[[["u64"],[R[73]]],[[R[141],["stack"]],["stack",[R[160]]]]]],[11,"retry",E,"Retry failed requests.",6,[[["p"]],[["stack",[R[162]]],[R[141],["stack"]]]]],[11,"timeout",E,"Fail requests that take longer than `timeout`.",6,[[[R[73]]],[["stack",[R[163]]],[R[141],["stack"]]]]],[11,"service",E,"Wrap the service `S` with the layers.",6,[[["s"]]]],[0,"layer","tower","A collection of `Layer` based tower services",N,N],[8,"Layer","tower::layer",R[173],N,N],[16,R[1],E,R[174],7,N],[10,"layer",E,R[175],7,[[["s"],["self"]]]],[0,"util",E,"`util` exports an Identity Layer and Chain, a mechanism…",N,N],[3,R[62],R[154],R[209],N,N],[3,"Stack",E,R[210],N,N],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,R[59],R[155],R[195],N,N],[3,"CallAll",E,R[197],N,N],[3,R[61],E,R[198],N,N],[4,"Either",E,R[202],N,N],[13,"A",E,E,8,N],[13,"B",E,E,8,N],[3,"Oneshot",E,R[199],N,N],[3,R[63],E,R[200],N,N],[3,"Ready",E,R[201],N,N],[3,R[60],E,R[196],N,N],[8,R[166],E,"An extension trait for `Service`s that provides a variety…",N,N],[11,"ready",E,"A future yielding the service when it is ready to accept a…",9,[[],["ready"]]],[11,"oneshot",E,"Consume this `Service`, calling with the providing request…",9,[[[R[58]]],["oneshot"]]],[11,"call_all",E,"Process all requests from the given `Stream`, and produce…",9,[[["s"]],["callall"]]],[11,"from",R[142],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[35],E,E,10,[[["self"]],[R[45]]]],[11,R[5],E,E,10,[[[U]],[R[4]]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[],[R[4]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[35],E,E,11,[[["self"]],[R[45]]]],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[],[R[4]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[35],E,E,12,[[["self"]],[R[45]]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[],[R[4]]]],[11,"from",R[143],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[5],E,E,13,[[[U]],[R[4]]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[9],E,E,13,[[["self"]],[T]]],[11,R[10],E,E,13,[[],[R[4]]]],[11,R[36],E,E,13,[[],["f"]]],[11,"from",R[134],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[26],E,E,14,[[["self"]],[T]]],[11,R[27],E,E,14,[[[T],["self"]]]],[11,R[5],E,E,14,[[[U]],[R[4]]]],[11,R[6],E,E,14,[[["self"]],[T]]],[11,R[7],E,E,14,[[["self"]],[R[8]]]],[11,R[9],E,E,14,[[["self"]],[T]]],[11,R[10],E,E,14,[[],[R[4]]]],[11,R[24],E,E,14,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,14,[[["target"],["self"]]]],[11,R[24],E,E,14,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,14,[[["target"],["self"]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[5],E,E,15,[[[U]],[R[4]]]],[11,R[6],E,E,15,[[["self"]],[T]]],[11,R[7],E,E,15,[[["self"]],[R[8]]]],[11,R[9],E,E,15,[[["self"]],[T]]],[11,R[10],E,E,15,[[],[R[4]]]],[11,"from",R[144],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[5],E,E,16,[[[U]],[R[4]]]],[11,R[6],E,E,16,[[["self"]],[T]]],[11,R[7],E,E,16,[[["self"]],[R[8]]]],[11,R[9],E,E,16,[[["self"]],[T]]],[11,R[10],E,E,16,[[],[R[4]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[5],E,E,17,[[[U]],[R[4]]]],[11,R[6],E,E,17,[[["self"]],[T]]],[11,R[7],E,E,17,[[["self"]],[R[8]]]],[11,R[9],E,E,17,[[["self"]],[T]]],[11,R[10],E,E,17,[[],[R[4]]]],[11,"from",R[145],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[5],E,E,18,[[[U]],[R[4]]]],[11,R[6],E,E,18,[[["self"]],[T]]],[11,R[7],E,E,18,[[["self"]],[R[8]]]],[11,R[9],E,E,18,[[["self"]],[T]]],[11,R[10],E,E,18,[[],[R[4]]]],[11,R[36],E,E,18,[[],["f"]]],[11,"from",R[135],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[26],E,E,19,[[["self"]],[T]]],[11,R[27],E,E,19,[[[T],["self"]]]],[11,R[5],E,E,19,[[[U]],[R[4]]]],[11,R[6],E,E,19,[[["self"]],[T]]],[11,R[7],E,E,19,[[["self"]],[R[8]]]],[11,R[9],E,E,19,[[["self"]],[T]]],[11,R[10],E,E,19,[[],[R[4]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[26],E,E,20,[[["self"]],[T]]],[11,R[27],E,E,20,[[[T],["self"]]]],[11,R[5],E,E,20,[[[U]],[R[4]]]],[11,R[6],E,E,20,[[["self"]],[T]]],[11,R[7],E,E,20,[[["self"]],[R[8]]]],[11,R[9],E,E,20,[[["self"]],[T]]],[11,R[10],E,E,20,[[],[R[4]]]],[11,R[24],E,E,20,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,20,[[["target"],["self"]]]],[11,R[24],E,E,20,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,20,[[["target"],["self"]]]],[11,"from",R[146],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[5],E,E,21,[[[U]],[R[4]]]],[11,R[6],E,E,21,[[["self"]],[T]]],[11,R[7],E,E,21,[[["self"]],[R[8]]]],[11,R[9],E,E,21,[[["self"]],[T]]],[11,R[10],E,E,21,[[],[R[4]]]],[11,R[36],E,E,21,[[],["f"]]],[11,"from",R[137],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[5],E,E,22,[[[U]],[R[4]]]],[11,R[6],E,E,22,[[["self"]],[T]]],[11,R[7],E,E,22,[[["self"]],[R[8]]]],[11,R[9],E,E,22,[[["self"]],[T]]],[11,R[10],E,E,22,[[],[R[4]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[26],E,E,23,[[["self"]],[T]]],[11,R[27],E,E,23,[[[T],["self"]]]],[11,R[5],E,E,23,[[[U]],[R[4]]]],[11,R[6],E,E,23,[[["self"]],[T]]],[11,R[7],E,E,23,[[["self"]],[R[8]]]],[11,R[9],E,E,23,[[["self"]],[T]]],[11,R[10],E,E,23,[[],[R[4]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[5],E,E,24,[[[U]],[R[4]]]],[11,R[6],E,E,24,[[["self"]],[T]]],[11,R[7],E,E,24,[[["self"]],[R[8]]]],[11,R[9],E,E,24,[[["self"]],[T]]],[11,R[10],E,E,24,[[],[R[4]]]],[11,R[24],E,E,24,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,24,[[["target"],["self"]]]],[11,R[24],E,E,24,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,24,[[["target"],["self"]]]],[11,"from",R[147],E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[35],E,E,25,[[["self"]],[R[45]]]],[11,R[5],E,E,25,[[[U]],[R[4]]]],[11,R[6],E,E,25,[[["self"]],[T]]],[11,R[7],E,E,25,[[["self"]],[R[8]]]],[11,R[9],E,E,25,[[["self"]],[T]]],[11,R[10],E,E,25,[[],[R[4]]]],[11,"from",R[148],E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[5],E,E,26,[[[U]],[R[4]]]],[11,R[6],E,E,26,[[["self"]],[T]]],[11,R[7],E,E,26,[[["self"]],[R[8]]]],[11,R[9],E,E,26,[[["self"]],[T]]],[11,R[10],E,E,26,[[],[R[4]]]],[11,R[36],E,E,26,[[],["f"]]],[11,"from",R[138],E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[26],E,E,27,[[["self"]],[T]]],[11,R[27],E,E,27,[[[T],["self"]]]],[11,R[5],E,E,27,[[[U]],[R[4]]]],[11,R[6],E,E,27,[[["self"]],[T]]],[11,R[7],E,E,27,[[["self"]],[R[8]]]],[11,R[9],E,E,27,[[["self"]],[T]]],[11,R[10],E,E,27,[[],[R[4]]]],[11,R[24],E,E,27,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,27,[[["target"],["self"]]]],[11,R[24],E,E,27,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,27,[[["target"],["self"]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[5],E,E,28,[[[U]],[R[4]]]],[11,R[6],E,E,28,[[["self"]],[T]]],[11,R[7],E,E,28,[[["self"]],[R[8]]]],[11,R[9],E,E,28,[[["self"]],[T]]],[11,R[10],E,E,28,[[],[R[4]]]],[11,"from",R[149],E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[5],E,E,29,[[[U]],[R[4]]]],[11,R[6],E,E,29,[[["self"]],[T]]],[11,R[7],E,E,29,[[["self"]],[R[8]]]],[11,R[9],E,E,29,[[["self"]],[T]]],[11,R[10],E,E,29,[[],[R[4]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[5],E,E,30,[[[U]],[R[4]]]],[11,R[6],E,E,30,[[["self"]],[T]]],[11,R[7],E,E,30,[[["self"]],[R[8]]]],[11,R[9],E,E,30,[[["self"]],[T]]],[11,R[10],E,E,30,[[],[R[4]]]],[11,"from",R[150],E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[5],E,E,31,[[[U]],[R[4]]]],[11,R[6],E,E,31,[[["self"]],[T]]],[11,R[7],E,E,31,[[["self"]],[R[8]]]],[11,R[9],E,E,31,[[["self"]],[T]]],[11,R[10],E,E,31,[[],[R[4]]]],[11,R[36],E,E,31,[[],["f"]]],[11,"from",R[139],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[26],E,E,32,[[["self"]],[T]]],[11,R[27],E,E,32,[[[T],["self"]]]],[11,R[5],E,E,32,[[[U]],[R[4]]]],[11,R[6],E,E,32,[[["self"]],[T]]],[11,R[7],E,E,32,[[["self"]],[R[8]]]],[11,R[9],E,E,32,[[["self"]],[T]]],[11,R[10],E,E,32,[[],[R[4]]]],[11,R[24],E,E,32,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,32,[[["target"],["self"]]]],[11,R[24],E,E,32,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,32,[[["target"],["self"]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[5],E,E,33,[[[U]],[R[4]]]],[11,R[6],E,E,33,[[["self"]],[T]]],[11,R[7],E,E,33,[[["self"]],[R[8]]]],[11,R[9],E,E,33,[[["self"]],[T]]],[11,R[10],E,E,33,[[],[R[4]]]],[11,"from",R[151],E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[35],E,E,34,[[["self"]],[R[45]]]],[11,R[5],E,E,34,[[[U]],[R[4]]]],[11,R[6],E,E,34,[[["self"]],[T]]],[11,R[7],E,E,34,[[["self"]],[R[8]]]],[11,R[9],E,E,34,[[["self"]],[T]]],[11,R[10],E,E,34,[[],[R[4]]]],[11,"from",R[152],E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[5],E,E,35,[[[U]],[R[4]]]],[11,R[6],E,E,35,[[["self"]],[T]]],[11,R[7],E,E,35,[[["self"]],[R[8]]]],[11,R[9],E,E,35,[[["self"]],[T]]],[11,R[10],E,E,35,[[],[R[4]]]],[11,R[36],E,E,35,[[],["f"]]],[11,"from",R[140],E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[26],E,E,36,[[["self"]],[T]]],[11,R[27],E,E,36,[[[T],["self"]]]],[11,R[5],E,E,36,[[[U]],[R[4]]]],[11,R[6],E,E,36,[[["self"]],[T]]],[11,R[7],E,E,36,[[["self"]],[R[8]]]],[11,R[9],E,E,36,[[["self"]],[T]]],[11,R[10],E,E,36,[[],[R[4]]]],[11,R[24],E,E,36,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,36,[[["target"],["self"]]]],[11,R[24],E,E,36,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,36,[[["target"],["self"]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[5],E,E,37,[[[U]],[R[4]]]],[11,R[6],E,E,37,[[["self"]],[T]]],[11,R[7],E,E,37,[[["self"]],[R[8]]]],[11,R[9],E,E,37,[[["self"]],[T]]],[11,R[10],E,E,37,[[],[R[4]]]],[11,"from",R[153],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[27],E,E,6,[[[T],["self"]]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[],[R[4]]]],[11,"from",R[154],E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[26],E,E,38,[[["self"]],[T]]],[11,R[27],E,E,38,[[[T],["self"]]]],[11,R[5],E,E,38,[[[U]],[R[4]]]],[11,R[6],E,E,38,[[["self"]],[T]]],[11,R[7],E,E,38,[[["self"]],[R[8]]]],[11,R[9],E,E,38,[[["self"]],[T]]],[11,R[10],E,E,38,[[],[R[4]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[26],E,E,39,[[["self"]],[T]]],[11,R[27],E,E,39,[[[T],["self"]]]],[11,R[5],E,E,39,[[[U]],[R[4]]]],[11,R[6],E,E,39,[[["self"]],[T]]],[11,R[7],E,E,39,[[["self"]],[R[8]]]],[11,R[9],E,E,39,[[["self"]],[T]]],[11,R[10],E,E,39,[[],[R[4]]]],[11,"from",R[155],E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[5],E,E,40,[[[U]],[R[4]]]],[11,R[6],E,E,40,[[["self"]],[T]]],[11,R[7],E,E,40,[[["self"]],[R[8]]]],[11,R[9],E,E,40,[[["self"]],[T]]],[11,R[10],E,E,40,[[],[R[4]]]],[11,R[24],E,E,40,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,40,[[["target"],["self"]]]],[11,R[24],E,E,40,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,40,[[["target"],["self"]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[5],E,E,41,[[[U]],[R[4]]]],[11,R[6],E,E,41,[[["self"]],[T]]],[11,R[7],E,E,41,[[["self"]],[R[8]]]],[11,R[9],E,E,41,[[["self"]],[T]]],[11,R[10],E,E,41,[[],[R[4]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[5],E,E,42,[[[U]],[R[4]]]],[11,R[6],E,E,42,[[["self"]],[T]]],[11,R[7],E,E,42,[[["self"]],[R[8]]]],[11,R[9],E,E,42,[[["self"]],[T]]],[11,R[10],E,E,42,[[],[R[4]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[27],E,E,8,[[[T],["self"]]]],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[],[R[4]]]],[11,R[36],E,E,8,[[],["f"]]],[11,R[24],E,E,8,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,8,[[["target"],["self"]]]],[11,R[24],E,E,8,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,8,[[["target"],["self"]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[5],E,E,43,[[[U]],[R[4]]]],[11,R[6],E,E,43,[[["self"]],[T]]],[11,R[7],E,E,43,[[["self"]],[R[8]]]],[11,R[9],E,E,43,[[["self"]],[T]]],[11,R[10],E,E,43,[[],[R[4]]]],[11,R[36],E,E,43,[[],["f"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[5],E,E,44,[[[U]],[R[4]]]],[11,R[6],E,E,44,[[["self"]],[T]]],[11,R[7],E,E,44,[[["self"]],[R[8]]]],[11,R[9],E,E,44,[[["self"]],[T]]],[11,R[10],E,E,44,[[],[R[4]]]],[11,R[24],E,E,44,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,44,[[["target"],["self"]]]],[11,R[24],E,E,44,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,44,[[["target"],["self"]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[5],E,E,45,[[[U]],[R[4]]]],[11,R[6],E,E,45,[[["self"]],[T]]],[11,R[7],E,E,45,[[["self"]],[R[8]]]],[11,R[9],E,E,45,[[["self"]],[T]]],[11,R[10],E,E,45,[[],[R[4]]]],[11,R[36],E,E,45,[[],["f"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[5],E,E,46,[[[U]],[R[4]]]],[11,R[6],E,E,46,[[["self"]],[T]]],[11,R[7],E,E,46,[[["self"]],[R[8]]]],[11,R[9],E,E,46,[[["self"]],[T]]],[11,R[10],E,E,46,[[],[R[4]]]],[11,R[24],E,E,46,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,46,[[["target"],["self"]]]],[11,R[24],E,E,46,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,46,[[["target"],["self"]]]],[11,"fmt",R[142],E,10,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,11,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,12,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"clone",R[134],E,14,[[["self"]],["buffer"]]],[11,"layer",E,E,15,[[["s"],["self"]]]],[11,"source",R[142],E,10,[[["self"]],[[R[56],["error"]],["error"]]]],[11,"poll",R[143],E,13,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"fmt",R[142],E,11,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,10,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,12,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,R[24],R[134],E,14,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,14,[[[R[58]],["self"]]]],[11,"poll",R[144],E,17,[[["self"]],[["async",[R[3]]],[R[4],["async"]]]]],[11,"poll",E,E,16,[[["self"]],[[R[4],["async"]],["async",[R[3]]]]]],[11,"fmt",R[146],E,21,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[145],E,18,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[135],E,19,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[137],E,22,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[135],E,20,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[137],E,23,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,24,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"layer",E,E,22,[[["s"],["self"]]]],[11,"layer",R[135],E,19,[[["s"],["self"]]]],[11,"clone",R[137],E,23,[[["self"]],["rate"]]],[11,"clone",R[135],E,19,[[["self"]],[R[156]]]],[11,"clone",E,E,20,[[["self"]],[R[159]]]],[11,"drop",R[145],E,18,[[["self"]]]],[11,R[24],R[135],E,20,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,20,[[[R[58]],["self"]]]],[11,R[24],R[137],E,24,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,24,[[[R[58]],["self"]]]],[11,"poll",R[145],E,18,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"poll",R[146],E,21,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"fmt",R[138],E,28,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[148],E,26,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[147],E,25,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[138],E,27,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,R[24],E,E,27,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,27,[[["self"],["req"]]]],[11,"layer",E,E,28,[[["s"],["self"]]]],[11,"clone",E,E,27,[[["self"]],["loadshed"]]],[11,"poll",R[148],E,26,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"fmt",R[147],E,25,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[139],E,32,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[149],E,30,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[139],E,33,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[150],E,31,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[149],E,29,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"clone",R[139],E,32,[[["self"]],["retry"]]],[11,R[24],E,E,32,[[["self"]],[["async"],[R[4],["async"]]]]],[11,"call",E,E,32,[[[R[58]],["self"]]]],[11,"layer",E,E,33,[[["s"],["self"]]]],[11,"poll",R[150],E,31,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[255],R[149],E,29,[[],["budget"]]],[11,"fmt",R[151],E,34,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[152],E,35,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[140],E,37,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,36,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"layer",E,E,37,[[["s"],["self"]]]],[11,"clone",E,E,36,[[["self"]],["timeout"]]],[11,R[24],E,E,36,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,36,[[[R[58]],["self"]]]],[11,"poll",R[152],E,35,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"fmt",R[151],E,34,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[154],E,38,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,39,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",R[155],E,46,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,41,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,8,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,42,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,45,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,"fmt",E,E,40,[[[R[21]],["self"]],[["error"],[R[4],["error"]]]]],[11,R[24],E,E,44,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,44,[[[R[58]],["self"]]]],[11,R[24],E,E,8,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,8,[[[R[58]],["self"]]]],[11,R[24],E,E,40,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,40,[[["self"],[T]],[[R[57]],["box",[R[57]]]]]],[11,R[24],E,E,46,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"call",E,E,46,[[["self"],[T]],[[R[57]],["box",[R[57]]]]]],[11,"poll",E,E,42,[[["self"]],[["async",[R[56]]],[R[4],["async"]]]]],[11,"poll",E,E,41,[[["self"]],[["async",[R[56]]],[R[4],["async"]]]]],[11,"layer",R[154],E,38,[[["s"],["self"]]]],[11,"layer",E,E,39,[[["s"],["self"]]]],[11,"clone",E,E,39,[[["self"]],["stack"]]],[11,"clone",E,E,38,[[["self"]],[R[54]]]],[11,"clone",R[155],E,8,[[["self"]],["either"]]],[11,R[255],R[154],E,38,[[],[R[54]]]],[11,"poll",R[155],E,45,[[["self"]],[["async"],[R[4],["async"]]]]],[11,"poll",E,E,43,[[["self"]],[[R[4],["async"]],["async"]]]],[11,"poll",E,E,8,[[["self"]],[["async"],[R[4],["async"]]]]],[11,"clone",R[153],E,6,[[["self"]],[R[141]]]],[11,"fmt",E,E,6,[[[R[21]],["self"]],[R[4]]]],[11,"new",R[134],R[39],14,[[["usize"],[T]],["buffer"]]],[11,R[38],E,R[39],14,[[["e"],["usize"],[T]],["buffer"]]],[11,"new",E,E,15,[[["usize"]],[[R[157],[R[158]]],[R[158]]]]],[11,R[38],E,E,15,[[["e"],["usize"]],[R[157]]]],[11,"new",R[144],E,16,[[["s"]],["servicestream"]]],[11,"new",E,E,17,[[[T]],[R[185]]]],[11,"new",R[135],R[247],19,[[["usize"]],[R[156]]]],[11,"new",E,R[248],20,[[["usize"],[T]],[R[159]]]],[11,"get_ref",E,R[91],20,[[["self"]],[T]]],[11,"get_mut",E,R[92],20,[[["self"]],[T]]],[11,R[48],E,R[93],20,[[],[T]]],[11,"new",R[137],R[252],22,[[[R[73]],["u64"]],[R[160]]]],[11,"new",E,R[253],23,[[[R[73]],["u64"]],["rate"]]],[11,"new",E,R[254],24,[[["rate"],[T]],["ratelimit"]]],[11,"get_ref",E,R[91],24,[[["self"]],[T]]],[11,"get_mut",E,R[92],24,[[["self"]],[T]]],[11,R[48],E,R[93],24,[[],[T]]],[11,"new",R[138],R[181],27,[[["s"]],["loadshed"]]],[11,"new",E,R[180],28,[[],[R[161]]]],[11,"new",R[149],R[234],29,[[["u32"],[R[73]],["f32"]],["budget"]]],[11,"deposit",E,R[235],29,[[["self"]]]],[11,"withdraw",E,R[236],29,[[["self"]],[[R[4],[R[78]]],[R[78]]]]],[11,"new",R[139],"Retry the inner service depending on this…",32,[[["s"],["p"]],["retry"]]],[11,"new",E,R[238],33,[[["p"]],[R[162]]]],[11,"new",R[140],R[228],36,[[[R[73]],[T]],["timeout"]]],[11,"new",E,R[227],37,[[[R[73]]],[R[163]]]],[11,"new",R[154],R[211],38,[[],[R[54]]]],[11,"new",E,R[212],39,[[["inner"],["outer"]],["stack"]]],[11,"new",R[155],E,40,[[["s"]],["boxservice"]]],[11,"new",E,R[205],41,[[["s"],["svc"]],["callall"]]],[11,R[48],E,R[49],41,[[],["svc"]]],[11,R[206],E,R[207],41,[[],[R[47]]]],[11,"new",E,R[208],42,[[["s"],["svc"]],[R[47]]]],[11,R[48],E,R[49],42,[[],["svc"]]],[11,"new",E,E,43,[[["s"],["req"]],["oneshot"]]],[11,"new",E,R[213],44,[[[R[56]]],[R[50]]]],[11,"new",E,E,45,[[[T]],["ready"]]],[11,"new",E,E,46,[[["s"]],["unsyncboxservice"]]]],"p":[[8,R[13]],[4,"Change"],[8,"Policy"],[8,R[1]],[8,R[164]],[8,R[64]],[3,R[165]],[8,"Layer"],[4,"Either"],[8,R[166]],[3,R[43]],[3,"Closed"],[3,R[44]],[3,R[23]],[3,"Buffer"],[3,R[42]],[3,R[12]],[3,R[11]],[3,R[23]],[3,R[86]],[3,R[87]],[3,R[23]],[3,R[88]],[3,"Rate"],[3,R[89]],[3,R[32]],[3,R[23]],[3,R[31]],[3,R[30]],[3,"Budget"],[3,R[82]],[3,R[23]],[3,"Retry"],[3,R[81]],[3,"Elapsed"],[3,R[23]],[3,"Timeout"],[3,R[76]],[3,R[62]],[3,"Stack"],[3,R[59]],[3,"CallAll"],[3,R[61]],[3,"Oneshot"],[3,R[63]],[3,"Ready"],[3,R[60]]]};
searchIndex[R[256]]={"doc":"Pre-emptively retry requests which have been outstanding…","i":[[3,"Hedge",R[256],"A middleware that pre-emptively retries requests which…",N,N],[3,"Future",E,"The Future returned by the hedge Service.",N,N],[8,"Policy",E,"A policy which describes which requests can be cloned and…",N,N],[10,R[242],E,"clone_request is called when the request is first received…",0,[[[R[58]],["self"]],[R[56]]]],[10,"can_retry",E,"can_retry is called after the hedge timeout to determine…",0,[[[R[58]],["self"]],["bool"]]],[11,"new",E,"Create a new hedge middleware.",1,[[["s"],["u64"],["f32"],["p"],[R[73]]],["hedge"]]],[11,"new_with_mock_latencies",E,"A hedge middleware with a prepopulated latency histogram.…",1,[[["s"],["u64"],["f32"],["p"],[R[73]]],["hedge"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,R[36],E,E,2,[[],["f"]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"poll",E,E,2,[[["self"]],["poll"]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[[R[58]],["self"]]]]],"p":[[8,"Policy"],[3,"Hedge"],[3,"Future"]]};
searchIndex[R[0]]={"doc":"Definition of the core `Service` trait to Tower","i":[[8,R[1],R[0],R[167],N,N],[16,R[66],E,R[168],0,N],[16,"Error",E,R[169],0,N],[16,"Future",E,R[170],0,N],[10,R[24],E,R[171],0,[[["self"]],["poll"]]],[10,"call",E,R[172],0,[[[R[58]],["self"]]]]],"p":[[8,R[1]]]};
searchIndex[R[109]]={"doc":E,"i":[[3,R[111],R[109],E,N,N],[0,R[57],E,E,N,N],[3,R[23],R[110],E,N,N],[11,"new",R[109],E,0,[[["target"],["m"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,R[24],E,E,0,[[["self"]],[["async"],[R[4],["async"]]]]],[11,R[122],E,E,0,[[["target"],["self"]]]],[11,R[24],E,E,0,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,0,[[["target"],["self"]]]],[11,"from",R[110],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,R[36],E,E,1,[[],["f"]]],[11,"fmt",R[109],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[110],E,1,[[["self"]],["poll"]]],[11,R[24],R[109],E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[[R[58]],["self"]]]]],"p":[[3,R[111]],[3,R[23]]]};
searchIndex[R[113]]={"doc":"When an underlying service is not ready, drive it to…","i":[[3,R[117],R[113],"Spawns tasks to drive its inner service to readiness.",N,N],[3,R[119],E,"Builds a SpawnReady with the result of an inner Future.",N,N],[3,R[120],E,"Builds SpawnReady instances with the result of an inner…",N,N],[3,R[118],E,"Spawns tasks to drive an inner service to readiness.",N,N],[0,"error",E,R[33],N,N],[3,R[44],R[115],R[123],N,N],[0,R[57],R[113],"Background readiness types",N,N],[3,R[121],R[116],"Drives a service to readiness.",N,N],[8,"BackgroundReadyExecutor",E,R[124],N,N],[11,"new",R[113],"Builds a SpawnReady layer with the default executor.",0,[[],["self"]]],[11,R[38],E,"Builds a SpawnReady layer with the provided executor.",0,[[["e"]],["self"]]],[11,"new",E,R[114],1,[[[T]],["self"]]],[11,R[38],E,R[114],1,[[["e"],[T]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[[T],["self"]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,R[36],E,E,2,[[],["f"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[[T],["self"]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,R[24],E,E,3,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,3,[[["target"],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,R[24],E,E,1,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,1,[[["target"],["self"]]]],[11,R[24],E,E,1,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,1,[[["target"],["self"]]]],[11,"from",R[115],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[35],E,E,4,[[["self"]],[R[45]]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,"from",R[116],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,R[36],E,E,5,[[],["f"]]],[11,"clone",R[113],E,0,[[["self"]],["self"]]],[11,"clone",E,E,3,[[["self"]],["makespawnready"]]],[11,"fmt",R[115],E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[113],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[115],E,4,[[[R[21]],["self"]],[R[4]]]],[11,"source",E,E,4,[[["self"]],[[R[56],["error"]],["error"]]]],[11,"poll",R[116],E,5,[[["self"]],["poll"]]],[11,"poll",R[113],E,2,[[["self"]],["poll"]]],[11,R[24],E,E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[["target"],["self"]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[[R[58]],["self"]]]],[11,"layer",E,E,0,[[["s"],["self"]]]]],"p":[[3,R[117]],[3,R[118]],[3,R[119]],[3,R[120]],[3,R[44]],[3,R[121]]]};
searchIndex[R[125]]={"doc":"Load balancing middlewares.","i":[[0,"error",R[125],R[33],N,N],[3,R[13],R[128],"An error returned when the balancer's endpoint discovery…",N,N],[0,"p2c",R[125],"A Power-of-Two-Choices Load Balancer",N,N],[3,R[131],R[129],"Efficiently distributes requests across an arbitrary…",N,N],[3,R[132],E,"Makes `Balancer`s given an inner service that makes…",N,N],[3,R[119],E,"Makes a balancer instance.",N,N],[3,"Balance",E,"Distributes requests across inner services using the…",N,N],[11,"new",E,"Builds a balancer using the system entropy.",0,[[],["self"]]],[11,"from_rng",E,"Builds a balancer from the provided RNG.",0,[[["r"]],[["error"],[R[4],["error"]]]]],[11,R[126],E,R[127],1,[[["s"]],["self"]]],[11,"new",E,"Initializes a P2C load balancer from the provided…",2,[[["smallrng"],["d"]],["self"]]],[11,R[126],E,R[127],2,[[["d"]],["self"]]],[11,"len",E,"Returns the number of endpoints currently tracked by the…",2,[[["self"]],["usize"]]],[0,"pool",R[125],"This module defines a load-balanced pool of services that…",N,N],[3,R[133],R[130],"A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder",E,"A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool",E,"A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new",E,"Create a new builder with default values for all load…",3,[[],["self"]]],[11,"underutilized_below",E,"When the estimated load (see the module-level docs) drops…",3,[[["self"],["f64"]],["self"]]],[11,"loaded_above",E,"When the estimated load (see the module-level docs)…",3,[[["self"],["f64"]],["self"]]],[11,"initial",E,"The initial estimated load average.",3,[[["self"],["f64"]],["self"]]],[11,"urgency",E,"How aggressively the estimated load average is updated.",3,[[["self"],["f64"]],["self"]]],[11,"max_services",E,"The maximum number of backing `Service` instances to…",3,[[["self"],[R[56],["usize"]],["usize"]],["self"]]],[11,"build",E,"See [`Pool::new`].",3,[[["ms"],["target"],["self"]],["pool"]]],[11,"new",E,"Construct a new dynamically sized `Pool`.",4,[[["ms"],["target"]],["self"]]],[11,"from",R[128],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[35],E,E,5,[[["self"]],[R[45]]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,"from",R[129],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[[T],["self"]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[[T],["self"]]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,R[24],E,E,1,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,1,[[["target"],["self"]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[],[R[4]]]],[11,R[36],E,E,6,[[],["f"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,R[24],E,E,2,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,2,[[["target"],["self"]]]],[11,R[24],E,E,2,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,2,[[["target"],["self"]]]],[11,"from",R[130],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[5],E,E,7,[[[U]],[R[4]]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[[T],["self"]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,R[24],E,E,4,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[122],E,E,4,[[["target"],["self"]]]],[11,R[24],E,E,4,[[["self"]],[[R[4],["async"]],["async"]]]],[11,R[112],E,E,4,[[["target"],["self"]]]],[11,"clone",R[129],E,0,[[["self"]],["balancelayer"]]],[11,"clone",E,E,1,[[["self"]],["balancemake"]]],[11,"clone",R[130],E,3,[[["self"]],["builder"]]],[11,R[255],E,E,3,[[],["self"]]],[11,"fmt",R[128],E,5,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[129],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[130],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[128],E,5,[[[R[21]],["self"]],[R[4]]]],[11,"source",E,E,5,[[["self"]],[[R[56],["error"]],["error"]]]],[11,"layer",R[129],E,0,[[["s"],["self"]]]],[11,"poll",E,E,6,[[["self"]],["poll"]]],[11,"poll",R[130],E,7,[[["self"]],[["poll",[R[3]]],[R[3]]]]],[11,R[24],R[129],E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["target"],["self"]]]],[11,R[24],E,"Prepares the balancer to process a request.",2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[[R[58]],["self"]]]],[11,R[24],R[130],E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,[[[R[58]],["self"]]]]],"p":[[3,R[131]],[3,R[132]],[3,"Balance"],[3,"Builder"],[3,"Pool"],[3,R[13]],[3,R[119]],[3,R[133]]]};
searchIndex[R[14]]={"doc":"Layer traits and extensions.","i":[[8,"Layer",R[14],R[173],N,N],[16,R[1],E,R[174],0,N],[10,"layer",E,R[175],0,[[["s"],["self"]]]]],"p":[[8,"Layer"]]};
searchIndex[R[15]]={"doc":R[16],"i":[[0,"mock",R[15],R[16],N,N],[3,"Mock",R[17],"A mock service",N,N],[3,"Handle",E,"Handle to the `Mock`.",N,N],[3,R[22],E,"Send a response in reply to a received request.",N,N],[5,"pair",E,"Create a new `Mock` and `Handle` pair.",N,[[]]],[0,"error",E,R[33],N,N],[3,"Closed",R[19],E,N,N],[0,R[57],R[17],R[34],N,N],[3,R[23],R[20],"Future of the `Mock` response.",N,N],[11,"poll_request",R[17],"Asynchronously gets the next request",0,[[["self"]],[["box",["error"]],["poll",[R[56],"box"]],[R[56]]]]],[11,"next_request",E,"Synchronously gets the next request.",0,[[["self"]],[R[56]]]],[11,"allow",E,"Allow a certain number of requests",0,[[["self"],["u64"]]]],[11,R[18],E,"Make the next poll_ method error with the given error.",0,[[["self"],["box",["error"]],["into",["box"]]]]],[11,"send_response",E,E,1,[[[T]]]],[11,R[18],E,E,1,[[["box",["error"]],["into",["box"]]]]],[14,"assert_request_eq",R[15],"Asserts that the mock handle receives a new request equal…",N,N],[11,"from",R[17],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[27],E,E,2,[[[T],["self"]]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",R[19],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[35],E,E,3,[[["self"]],[R[45]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",R[20],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,R[36],E,E,4,[[],["f"]]],[11,"clone",R[17],E,2,[[["self"]],["self"]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,0,[[["self"]]]],[11,"fmt",R[19],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[20],E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[17],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[19],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[20],E,4,[[["self"]],["poll"]]],[11,R[24],R[17],E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]]]]],"p":[[3,"Handle"],[3,R[22]],[3,"Mock"],[3,"Closed"],[3,R[23]]]};
searchIndex[R[25]]={"doc":"Tower middleware for shedding load when inner services…","i":[[3,R[30],R[25],R[176],N,N],[3,R[31],E,R[177],N,N],[0,"error",E,R[33],N,N],[3,R[32],R[28],R[178],N,N],[0,R[57],R[25],R[34],N,N],[3,R[23],R[29],R[179],N,N],[11,"new",R[25],R[180],0,[[],["self"]]],[11,"new",E,R[181],1,[[["s"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[[T],["self"]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[[T],["self"]]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",R[28],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[R[45]]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",R[29],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,R[36],E,E,3,[[],["f"]]],[11,"clone",R[25],E,0,[[["self"]],[R[161]]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"fmt",R[28],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[29],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[25],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[28],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[29],E,3,[[["self"]],["poll"]]],[11,R[24],R[25],E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],["req"]]]],[11,"layer",E,E,0,[[["s"],["self"]]]]],"p":[[3,R[30]],[3,R[31]],[3,R[32]],[3,R[23]]]};
searchIndex[R[2]]={"doc":"Tower service discovery","i":[[3,R[11],R[2],R[182],N,N],[3,R[12],E,R[183],N,N],[4,"Change",E,R[184],N,N],[13,"Insert",E,E,0,N],[13,"Remove",E,E,0,N],[11,"new",E,E,1,[[[T]],[R[185]]]],[11,"new",E,E,2,[[["s"]],["self"]]],[8,R[13],E,R[186],N,N],[16,"Key",E,R[187],3,N],[16,R[1],E,E,3,N],[16,"Error",E,R[188],3,N],[10,"poll",E,R[102],3,[[["self"]],[["poll",[R[3]]],[R[3]]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"poll",E,E,1,[[["self"]],[["poll",[R[3]]],[R[3]]]]],[11,"poll",E,E,2,[[["self"]],[["poll",[R[3]]],[R[3]]]]]],"p":[[4,"Change"],[3,R[11]],[3,R[12]],[8,R[13]]]};
searchIndex[R[37]]={"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,R[42],R[37],R[189],N,N],[3,"Buffer",E,R[190],N,N],[0,"error",E,R[33],N,N],[3,R[43],R[40],R[191],N,N],[3,"Closed",E,R[192],N,N],[3,R[44],E,R[123],N,N],[0,R[57],R[37],R[34],N,N],[3,R[23],R[41],R[193],N,N],[11,"new",R[37],E,0,[[["usize"]],["self"]]],[11,R[38],E,E,0,[[["e"],["usize"]],["self"]]],[11,"new",E,R[39],1,[[["usize"],[T]],["self"]]],[11,R[38],E,R[39],1,[[["e"],["usize"],[T]],["self"]]],[8,R[194],E,R[124],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[[T],["self"]]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",R[40],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[R[45]]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[35],E,E,3,[[["self"]],[R[45]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[35],E,E,4,[[["self"]],[R[45]]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,"from",R[41],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,R[36],E,E,5,[[],["f"]]],[11,"clone",R[37],E,1,[[["self"]],["self"]]],[11,"fmt",R[40],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[37],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[40],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,4,[[[R[21]],["self"]],[R[4]]]],[11,"source",E,E,2,[[["self"]],[[R[56],["error"]],["error"]]]],[11,"poll",R[41],E,5,[[["self"]],["poll"]]],[11,"layer",R[37],E,0,[[["s"],["self"]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[[R[58]],["self"]]]]],"p":[[3,R[42]],[3,"Buffer"],[3,R[43]],[3,"Closed"],[3,R[44]],[3,R[23]]]};
searchIndex[R[46]]={"doc":"Various utility types and functions that are generally…","i":[[3,R[59],R[46],R[195],N,N],[3,R[60],E,R[196],N,N],[3,"CallAll",E,R[197],N,N],[3,R[61],E,R[198],N,N],[3,"Oneshot",E,R[199],N,N],[3,R[63],E,R[200],N,N],[3,"Ready",E,R[201],N,N],[3,R[65],E,"A `Service` implemented by a closure.",N,N],[4,"Either",E,R[202],N,N],[13,"A",E,E,0,N],[13,"B",E,E,0,N],[5,R[203],E,R[204],N,[[[T]],[R[55]]]],[11,"new",E,E,1,[[["s"]],["self"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[11,"new",E,R[205],3,[[["s"],["svc"]],["callall"]]],[11,R[48],E,R[49],3,[[],["svc"]]],[11,R[206],E,R[207],3,[[],[R[47]]]],[11,"new",E,R[208],4,[[["s"],["svc"]],[R[47]]]],[11,R[48],E,R[49],4,[[],["svc"]]],[0,"layer",E,E,N,N],[3,R[62],R[51],R[209],N,N],[3,"Stack",E,R[210],N,N],[11,"new",E,R[211],5,[[],[R[54]]]],[11,"new",E,R[212],6,[[["inner"],["outer"]],["self"]]],[11,"new",R[46],E,7,[[["s"],["req"]],["self"]]],[11,"new",E,R[213],8,[[[R[56]]],[R[50]]]],[11,"new",E,E,9,[[[T]],["self"]]],[0,"error",E,R[33],N,N],[0,R[50],"tower_util::error",E,N,N],[3,"None",R[52],E,N,N],[0,R[57],R[46],R[34],N,N],[0,R[50],"tower_util::future",E,N,N],[3,R[23],R[53],"Response future returned by `Optional`.",N,N],[8,R[64],R[46],R[214],N,N],[16,R[66],E,R[215],10,N],[16,"Error",E,R[216],10,N],[16,R[1],E,R[217],10,N],[16,R[218],E,R[219],10,N],[16,"Future",E,R[220],10,N],[10,R[24],E,R[221],10,[[["self"]],["poll"]]],[10,R[112],E,R[222],10,[[["target"],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[5],E,E,7,[[[U]],[R[4]]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[],[R[4]]]],[11,R[36],E,E,7,[[],["f"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[],[R[4]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[5],E,E,9,[[[U]],[R[4]]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[],[R[4]]]],[11,R[36],E,E,9,[[],["f"]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[27],E,E,11,[[[T],["self"]]]],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[[T],["self"]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,R[36],E,E,0,[[],["f"]]],[11,"from",R[51],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[27],E,E,5,[[[T],["self"]]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[27],E,E,6,[[[T],["self"]]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[],[R[4]]]],[11,"from",R[52],E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[35],E,E,12,[[["self"]],[R[45]]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[],[R[4]]]],[11,"from",R[53],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[5],E,E,13,[[[U]],[R[4]]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[9],E,E,13,[[["self"]],[T]]],[11,R[10],E,E,13,[[],[R[4]]]],[11,R[36],E,E,13,[[],["f"]]],[11,"clone",R[46],E,0,[[["self"]],["either"]]],[11,"clone",R[51],E,5,[[["self"]],[R[54]]]],[11,"clone",E,E,6,[[["self"]],["stack"]]],[11,"clone",R[46],E,11,[[["self"]],[R[55]]]],[11,R[255],R[51],E,5,[[],[R[54]]]],[11,"fmt",R[46],E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[51],E,5,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,6,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[52],E,12,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[46],E,9,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,11,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[52],E,12,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[46],E,0,[[["self"]],["poll"]]],[11,"poll",E,E,7,[[["self"]],["poll"]]],[11,"poll",R[53],E,13,[[["self"]],["poll"]]],[11,"poll",R[46],E,9,[[["self"]],["poll"]]],[11,"poll",E,E,3,[[["self"]],[["poll",[R[56]]],[R[56]]]]],[11,"poll",E,E,4,[[["self"]],[["poll",[R[56]]],[R[56]]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[T]],[[R[57]],["box",[R[57]]]]]],[11,R[24],E,E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]],[[R[57]],["box",[R[57]]]]]],[11,R[24],E,E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[[R[58]],["self"]]]],[11,R[24],E,E,8,[[["self"]],["poll"]]],[11,"call",E,E,8,[[[R[58]],["self"]]]],[11,R[24],E,E,11,[[["self"]],["poll"]]],[11,"call",E,E,11,[[[R[58]],["self"]]]],[11,"layer",R[51],E,5,[[["s"],["self"]]]],[11,"layer",E,E,6,[[["s"],["self"]]]]],"p":[[4,"Either"],[3,R[59]],[3,R[60]],[3,"CallAll"],[3,R[61]],[3,R[62]],[3,"Stack"],[3,"Oneshot"],[3,R[63]],[3,"Ready"],[8,R[64]],[3,R[65]],[3,"None"],[3,R[23]]]};
searchIndex[R[67]]={"doc":"Conditionally dispatch requests to the inner service based…","i":[[3,R[70],R[67],E,N,N],[3,"Filter",E,E,N,N],[0,"error",E,R[33],N,N],[3,"Error",R[68],"Error produced by `Filter`",N,N],[11,"rejected",E,"Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner",E,"Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,R[57],R[67],R[34],N,N],[3,R[23],R[69],"Filtered response future",N,N],[11,"new",R[67],E,1,[[[U]],["self"]]],[8,R[71],E,"Checks a request",N,N],[16,"Future",E,E,2,N],[10,"check",E,E,2,[[["self"],[R[58]]]]],[11,"new",E,E,3,[[[U],[T]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[[T],["self"]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",R[68],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[35],E,E,0,[[["self"]],[R[45]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",R[69],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,R[36],E,E,4,[[],["f"]]],[11,"clone",R[67],E,3,[[["self"]],["filter"]]],[11,"fmt",R[68],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[69],E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[67],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[68],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"source",E,E,0,[[["self"]],[[R[56],["error"]],["error"]]]],[11,"poll",R[69],E,4,[[["self"]],["poll"]]],[11,R[24],R[67],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[[R[58]],["self"]]]],[11,"layer",E,E,1,[[["s"],["self"]]]]],"p":[[3,"Error"],[3,R[70]],[8,R[71]],[3,"Filter"],[3,R[23]]]};
searchIndex[R[72]]={"doc":"Tower middleware that applies a timeout to requests.","i":[[3,R[76],R[72],R[223],N,N],[3,"Timeout",E,R[224],N,N],[0,"error",E,R[33],N,N],[3,"Elapsed",R[74],R[225],N,N],[0,R[57],R[72],R[34],N,N],[3,R[23],R[75],R[226],N,N],[11,"new",R[72],R[227],0,[[[R[73]]],["self"]]],[11,"new",E,R[228],1,[[[R[73]],[T]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[[T],["self"]]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",R[74],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[35],E,E,2,[[["self"]],[R[45]]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",R[75],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,R[36],E,E,3,[[],["f"]]],[11,"clone",R[72],E,1,[[["self"]],["timeout"]]],[11,"fmt",R[74],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[75],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[72],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[74],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[75],E,3,[[["self"]],["poll"]]],[11,"layer",R[72],E,0,[[["s"],["self"]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[[R[58]],["self"]]]]],"p":[[3,R[76]],[3,"Timeout"],[3,"Elapsed"],[3,R[23]]]};
searchIndex[R[77]]={"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,R[81],R[77],R[229],N,N],[3,"Retry",E,R[230],N,N],[0,"budget",E,R[231],N,N],[3,"Budget",R[79],R[232],N,N],[3,R[82],E,R[233],N,N],[11,"new",E,R[234],0,[[["u32"],["f32"],[R[73]]],["self"]]],[11,"deposit",E,R[235],0,[[["self"]]]],[11,"withdraw",E,R[236],0,[[["self"]],[[R[4],[R[78]]],[R[78]]]]],[0,R[57],R[77],R[34],N,N],[3,R[23],R[80],R[237],N,N],[11,"new",R[77],R[238],1,[[["p"]],["self"]]],[8,"Policy",E,R[239],N,N],[16,"Future",E,R[240],2,N],[10,"retry",E,R[241],2,[[[R[4]],["e"],["req"],["res"],["self"]],[R[56]]]],[10,R[242],E,R[243],2,[[["req"],["self"]],[R[56]]]],[11,"new",E,"Retry the inner service depending on this `Policy`.",3,[[["s"],["p"]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[[T],["self"]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",R[79],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,"from",R[80],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,R[36],E,E,5,[[],["f"]]],[11,"clone",R[77],E,3,[[["self"]],["retry"]]],[11,R[255],R[79],E,0,[[],["budget"]]],[11,"fmt",E,E,4,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[80],E,5,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[77],E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[80],E,5,[[["self"]],["poll"]]],[11,R[24],R[77],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[[R[58]],["self"]]]],[11,"layer",E,E,1,[[["s"],["self"]]]]],"p":[[3,"Budget"],[3,R[81]],[8,"Policy"],[3,"Retry"],[3,R[82]],[3,R[23]]]};
searchIndex[R[83]]={"doc":"Tower middleware for limiting requests.","i":[[3,R[87],R[83],R[84],N,N],[3,R[86],E,R[84],N,N],[3,R[89],E,R[85],N,N],[3,R[88],E,R[85],N,N],[0,R[244],E,R[245],N,N],[3,R[86],"tower_limit::concurrency",R[84],N,N],[3,R[87],E,R[84],N,N],[0,R[57],E,R[34],N,N],[3,R[23],R[94],R[246],N,N],[11,"new",R[83],R[247],0,[[["usize"]],["self"]]],[11,"new",E,R[248],1,[[["usize"],[T]],["self"]]],[11,"get_ref",E,R[91],1,[[["self"]],[T]]],[11,"get_mut",E,R[92],1,[[["self"]],[T]]],[11,R[48],E,R[93],1,[[],[T]]],[0,"rate",E,R[249],N,N],[3,R[88],R[90],R[85],N,N],[3,"Rate",E,R[250],N,N],[3,R[89],E,R[85],N,N],[0,R[57],E,R[34],N,N],[3,R[23],R[95],R[251],N,N],[11,"new",R[83],R[252],2,[[["u64"],[R[73]]],["self"]]],[11,"new",R[90],R[253],3,[[["u64"],[R[73]]],["self"]]],[11,"new",R[83],R[254],4,[[["rate"],[T]],["self"]]],[11,"get_ref",E,R[91],4,[[["self"]],[T]]],[11,"get_mut",E,R[92],4,[[["self"]],[T]]],[11,R[48],E,R[93],4,[[],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[[T],["self"]]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[[T],["self"]]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",R[94],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[],[R[4]]]],[11,R[36],E,E,5,[[],["f"]]],[11,"from",R[90],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[[T],["self"]]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",R[95],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[],[R[4]]]],[11,R[36],E,E,6,[[],["f"]]],[11,"clone",R[83],E,0,[[["self"]],[R[156]]]],[11,"clone",E,E,1,[[["self"]],[R[159]]]],[11,"clone",R[90],E,3,[[["self"]],["rate"]]],[11,"drop",R[94],E,5,[[["self"]]]],[11,"fmt",E,E,5,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[83],E,0,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[95],E,6,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[83],E,2,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[90],E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[83],E,4,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[94],E,5,[[["self"]],["poll"]]],[11,"poll",R[95],E,6,[[["self"]],["poll"]]],[11,"layer",R[83],E,0,[[["s"],["self"]]]],[11,"layer",E,E,2,[[["s"],["self"]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[[R[58]],["self"]]]],[11,R[24],E,E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,[[[R[58]],["self"]]]]],"p":[[3,R[86]],[3,R[87]],[3,R[88]],[3,"Rate"],[3,R[89]],[3,R[23]],[3,R[23]]]};
searchIndex[R[96]]={"doc":"Abstractions and utilties for measuring a service's load.","i":[[3,"Constant",R[96],"Wraps a type so that `Load::load` returns a constant value.",N,N],[3,R[103],E,"Attaches a `I`-typed instruments to the result of an…",N,N],[3,R[107],E,"A `Instrument` implementation that drops each instrument…",N,N],[11,"new",E,"Wraps a `T`-typed service with a constant `M`-typed load…",0,[[["m"],[T]],["self"]]],[11,"new",E,"Wraps a future, instrumenting its value if successful.",1,[[["i"],["f"],["h"]],["self"]]],[0,"peak_ewma",E,"A `Load` implementation that PeakEWMA on response latency.",N,N],[3,"PeakEwma",R[97],"Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,R[104],E,"Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost",E,"Represents the relative cost of communicating with a…",N,N],[3,"Handle",E,"Tracks an in-flight request and updates the RTT-estimate…",N,N],[11,"new",E,"Wraps a `D`-typed `Discover` so that services have a…",2,[[["i"],[R[73]],["d"]],["self"]]],[0,"pending_requests",R[96],"A `Load` implementation that uses the count of in-flight…",N,N],[3,R[108],R[98],"Expresses load based on the number of currently-pending…",N,N],[3,R[105],E,"Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count",E,"Represents the number of currently-pending requests to a…",N,N],[3,"Handle",E,"Tracks an in-flight request by reference count.",N,N],[11,"new",E,"Wraps a `Discover``, wrapping all of its services…",3,[[["i"],["d"]],["self"]]],[8,R[106],R[96],"Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output",E,"The instrumented value type.",4,N],[10,R[99],E,"Attaches an `H`-typed handle to a `V`-typed value.",4,[[["self"],["v"],["h"]]]],[8,"Load",E,"Exposes a load metric.",N,N],[16,"Metric",E,"A comparable load metric. Lesser values are \"preferable\"…",5,N],[10,"load",E,"Obtains a service's load.",5,[[["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[],[R[4]]]],[11,R[36],E,E,1,[[],["f"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[27],E,E,6,[[[T],["self"]]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[],[R[4]]]],[11,"from",R[97],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[5],E,E,7,[[[U]],[R[4]]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[],[R[4]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[27],E,E,8,[[[T],["self"]]]],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[],[R[4]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[5],E,E,9,[[[U]],[R[4]]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[],[R[4]]]],[11,"from",R[98],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[5],E,E,10,[[[U]],[R[4]]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[],[R[4]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[27],E,E,11,[[[T],["self"]]]],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[],[R[4]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[],[R[4]]]],[11,R[99],R[96],E,6,[[["self"],["v"],["h"]],["v"]]],[11,"load",E,E,0,[[["self"]],["m"]]],[11,"load",R[97],E,7,[[["self"]]]],[11,"load",R[98],E,10,[[["self"]],["count"]]],[11,"eq",R[97],E,8,[[["cost"],["self"]],["bool"]]],[11,"ne",E,E,8,[[["cost"],["self"]],["bool"]]],[11,"eq",R[98],E,11,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,11,[[["self"],["count"]],["bool"]]],[11,"clone",R[96],E,6,[[["self"]],["noinstrument"]]],[11,"clone",R[97],E,8,[[["self"]],["cost"]]],[11,"clone",R[98],E,11,[[["self"]],["count"]]],[11,"cmp",E,E,11,[[["self"],["count"]],[R[100]]]],[11,"drop",R[97],E,9,[[["self"]]]],[11,R[101],E,E,8,[[["cost"],["self"]],[[R[100]],[R[56],[R[100]]]]]],[11,"lt",E,E,8,[[["cost"],["self"]],["bool"]]],[11,"le",E,E,8,[[["cost"],["self"]],["bool"]]],[11,"gt",E,E,8,[[["cost"],["self"]],["bool"]]],[11,"ge",E,E,8,[[["cost"],["self"]],["bool"]]],[11,R[101],R[98],E,11,[[["self"],["count"]],[[R[100]],[R[56],[R[100]]]]]],[11,"lt",E,E,11,[[["self"],["count"]],["bool"]]],[11,"le",E,E,11,[[["self"],["count"]],["bool"]]],[11,"gt",E,E,11,[[["self"],["count"]],["bool"]]],[11,"ge",E,E,11,[[["self"],["count"]],["bool"]]],[11,R[255],E,E,11,[[],["count"]]],[11,"fmt",R[96],E,6,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[97],E,8,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",R[98],E,10,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,11,[[[R[21]],["self"]],[R[4]]]],[11,"fmt",E,E,12,[[[R[21]],["self"]],[R[4]]]],[11,"poll",R[96],E,1,[[["self"]],["poll"]]],[11,"poll",E,R[102],0,[[["self"]],[[R[3]],["poll",[R[3]]]]]],[11,"poll",R[97],E,2,[[["self"]],[[R[3]],["poll",[R[3]]]]]],[11,"poll",R[98],R[102],3,[[["self"]],[[R[3]],["poll",[R[3]]]]]],[11,R[24],R[96],E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[[R[58]],["self"]]]],[11,R[24],R[97],E,7,[[["self"]],["poll"]]],[11,"call",E,E,7,[[[R[58]],["self"]]]],[11,R[24],R[98],E,10,[[["self"]],["poll"]]],[11,"call",E,E,10,[[[R[58]],["self"]]]]],"p":[[3,"Constant"],[3,R[103]],[3,R[104]],[3,R[105]],[8,R[106]],[8,"Load"],[3,R[107]],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,R[108]],[3,"Count"],[3,"Handle"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);